<?php  abstract class Func { private static $STR_REDUCE_LEFT = 1; private static $STR_REDUCE_RIGHT = 2; private static $STR_REDUCE_CENTER = 4; private static $BEFORE = 0; private static $AFTER = 1; public static 
function getAllFromTable($table, array $where = array(), $select = "*", $left = array(), $inner = array()) { $q = new Query(); 
$q ->select($select) ->from($table); 
if (is_array($inner) && count($inner) > 0) { $q->inner_join($inner); } if (is_array($left) && count($left) > 0) { $q->left_join($left); } if (is_array($where) && count($where) > 0) { $q->where_equal_to($where); 
} $q ->run();
 $data = $q->get_selected();
  if (!($q->get_selected_count() > 0)) { return false;
   } return $data; } public static function PercentToFloat($value) { $v = str_replace("%", "", $value);
    $v = trim($v);
	 $v = str_replace(",", ".", $v);
	  return $v;
	   } public static function RealToFloat($value) { $v = str_replace("Akz$", "", $value);
	    $v = trim($v);
		 $v = str_replace(".", "", $v);
		  $v = str_replace(",", ".", $v); 
		  return $v; 
		  } public static function negativeToPositive($value) { if ($value < 0) { $value = $value * -1;
		   } return $value; 
		   } public static function fixEncode($str = '') { $str.= ' '; return trim((mb_detect_encoding($str, 'ASCII,UTF-8,ISO-8859-1') == 'UTF-8') ? $str : utf8_encode($str)); } public static function FloatToReal($value, $format = 2) { return number_format($value, $format, ",", "."); } public static function percent_xn($porcentagem, $total) { return ( $porcentagem / 100 ) * $total; } public static function percent_nx($valor, $total, $round = 1) { if (empty($valor) || empty($total)) { return 0; } return number_format(($valor * 100) / $total, $round); } public static function percent_nnx($parcial, $porcentagem) { return ($parcial / $porcentagem ) * 100; } public static function removeAccentuation($string, $slug = false) { $string = strtolower($string); $ascii['a'] = range(224, 230); $ascii['e'] = range(232, 235); $ascii['i'] = range(236, 239); $ascii['o'] = array_merge(range(242, 246), array(240, 248)); $ascii['u'] = range(249, 252); $ascii['b'] = array(223); $ascii['c'] = array(231); $ascii['d'] = array(208); $ascii['n'] = array(241); $ascii['y'] = array(253, 255); $ascii['-'] = array(32); $ascii[''] = array_merge(range(145, 148), array(34, 39)); foreach ($ascii as $key => $item) { $acentos = ''; foreach ($item AS $codigo) $acentos .= chr($codigo); $troca[$key] = '/[' . $acentos . ']/i'; } $string = preg_replace(array_values($troca), array_keys($troca), $string); if ($slug) { $newtitle = explode(' ', $string); $newtitle = implode(' ', array_slice($newtitle, 0, 6)); $urltitle = preg_replace('/[^a-z0-9]/i', ' ', $newtitle); $string = str_replace(array(" ", "#"), array("-", ""), $newtitle); } return $string; } public static function acento($string) { return preg_replace('/[`^~\'"]/', null, iconv('UTF-8', 'ASCII//TRANSLIT', $string)); } public static function validarCPF($CPF = '') { $cpf = str_pad(preg_replace('/[^0-9]/', '', $CPF), 11, '0', STR_PAD_LEFT); if (strlen($cpf) != 11 || $cpf == '00000000000' || $cpf == '11111111111' || $cpf == '22222222222' || $cpf == '33333333333' || $cpf == '44444444444' || $cpf == '55555555555' || $cpf == '66666666666' || $cpf == '77777777777' || $cpf == '88888888888' || $cpf == '99999999999') { return FALSE; } else { for ($t = 9; $t < 11; $t++) { for ($d = 0, $c = 0; $c < $t; $c++) { $d += $cpf{$c} * (($t + 1) - $c); } $d = ((10 * $d) % 11) % 10; if ($cpf{$c} != $d) { return FALSE; } } return TRUE; } } public static function getClientIp() { $ipaddress = ''; if (getenv('HTTP_CLIENT_IP')) $ipaddress = getenv('HTTP_CLIENT_IP'); else if (getenv('HTTP_X_FORWARDED_FOR')) $ipaddress = getenv('HTTP_X_FORWARDED_FOR'); else if (getenv('HTTP_X_FORWARDED')) $ipaddress = getenv('HTTP_X_FORWARDED'); else if (getenv('HTTP_FORWARDED_FOR')) $ipaddress = getenv('HTTP_FORWARDED_FOR'); else if (getenv('HTTP_FORWARDED')) $ipaddress = getenv('HTTP_FORWARDED'); else if (getenv('REMOTE_ADDR')) $ipaddress = getenv('REMOTE_ADDR'); else $ipaddress = NULL; return $ipaddress; } public static function mask($val, $mask, $prefix = "#", $exceptionPrefix = "?") { if (empty($val)) { return NULL; } $count_value = strlen($val); $count_prefix = substr_count($mask, $prefix); if ($count_prefix > $count_value) { $mask = str_replace($exceptionPrefix . $prefix, '', $mask); } $newMask = str_replace($exceptionPrefix, '', $mask); $result = ''; $eachMask = str_split($newMask); $eachVal = str_split($val); $i = 0; foreach ($eachMask as $v) { if ($v == $prefix) { $result.= isset($eachVal[$i]) ? $eachVal[$i] : ''; $i++; } else { $result.= $v; } } return $result; } public static function maskPhone($phone, $DDD = 82, array $remove = array("(", ")", " ", "-")) { $num = str_replace($remove, "", $phone); if (strlen($num) == 8) { return preg_replace('/(\d{2})(\d{4})(\d*)/', '($1) $2-$3', $DDD . $num); } elseif (strlen($num) == 10) { return preg_replace('/(\d{2})(\d{4})(\d*)/', '($1) $2-$3', $num); } else { return false; } } public static function extractOnlyNumbers($string) { if (empty($string)) { return NULL; } return preg_replace('/\D/', '', $string); } public static function array_table($table, array $where = array(), $fetch = FALSE) { $q = new Query(); $q ->select($fetch) ->from($table); if (is_array($where) && count($where) > 0) { $q ->where_equal_to($where); } $q ->limit(1) ->run(); $data = $q->get_selected(); $count = $q->get_selected_count(); if (!($count > 0)) { return false; } if (!$fetch) { return $data; } return $data[$fetch]; } public static function _sum_values($table, $column, $where = false) { $total = Func::_contarReg($table); if (!$total > 0) { return 0; } $q = new Query(); $q ->select("SUM($column) AS total") ->from($table); if (!!$where) { $q ->where_equal_to($where); } $q ->limit(1) ->run(); $data = $q->get_selected(); return !($data['total'] > 0) ? 0 : $data['total']; } public static function _contarReg($table, $where = false, $return = false) { $q = new Query(); if ($where == false) { $q ->select() ->from($table) ->run(); } else { $q ->select() ->from($table) ->where_equal_to($where) ->run(); } $count = $q->get_selected_count(); if ($count > 0) { return $count; } return $return; } public static function str_truncate($str, $length) { $rep = self::$AFTER; if (strlen($str) <= $length) return $str; if ($rep == self::$BEFORE) $oc = strrpos(substr($str, 0, $length), ' '); if ($rep == self::$AFTER) $oc = strpos(substr($str, $length), ' ') + $length; $string = substr($str, 0, $oc); if (strlen($str) > $length) $string = $string . "..."; return ($length !== False) ? $string : $str; } public static function formatBytes($bytes, $precision = 2) { $units = array('B', 'KB', 'MB', 'GB', 'TB'); $bytes = max($bytes, 0); $pow = floor(($bytes ? log($bytes) : 0) / log(1024)); $pow = min($pow, count($units) - 1); return round($bytes, $precision) . ' ' . $units[$pow]; } public static function slugURL($title, $created) { $newurltitle = self::removeAccentuation($title, true); return date("d-m-Y", strtotime($created)) . '/' . $newurltitle . '.html'; } public static function isAjaxRequest() { return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'; } public static function ForceDownloadFile($file_name) { $mime = 'application/force-download'; header('Pragma: public'); header('Expires: 0'); header('Cache-Control: must-revalidate, post-check=0, pre-check=0'); header('Cache-Control: private', false); header('Content-Type: ' . $mime); header('Content-Disposition: attachment; filename="' . basename($file_name) . '"'); header('Content-Transfer-Encoding: binary'); header('Connection: close'); readfile($file_name); exit(); } public static function str_reduce($str, $max_length, $append = NULL, $remove_extra_spaces = true) { $position = self::$STR_REDUCE_RIGHT; if (!is_string($str)) { die("<br /><strong>Warning</strong>: " . __FUNCTION__ . "() expects parameter 1 to be string."); return false; } else if (!is_int($max_length)) { die("<br /><strong>Warning</strong>: " . __FUNCTION__ . "() expects parameter 2 to be integer."); return false; } else if (!is_string($append) && $append !== NULL) { die("<br /><strong>Warning</strong>: " . __FUNCTION__ . "() expects optional parameter 3 to be string."); return false; } else if (!is_int($position)) { die("<br /><strong>Warning</strong>: " . __FUNCTION__ . "() expects optional parameter 4 to be integer."); return false; } else if (( $position != self::$STR_REDUCE_LEFT) && ( $position != self::$STR_REDUCE_RIGHT ) && ( $position != $this->STR_REDUCE_CENTER ) && ( $position != ( $this->STR_REDUCE_LEFT | self::$STR_REDUCE_RIGHT ) )) { die("<br /><strong>Warning</strong>: " . __FUNCTION__ . "(): The specified parameter '" . $position . "' is invalid."); return false; } if ($append === NULL) { $append = "..."; } $str = html_entity_decode($str); if ((bool) $remove_extra_spaces) { $str = preg_replace("/\s+/s", " ", trim($str)); } if (strlen($str) <= $max_length) { return htmlentities($str); } if ($position == self::$STR_REDUCE_LEFT) { $str_reduced = preg_replace("/^.*?(\s.{0," . $max_length . "})$/s", "\\1", $str); while (( strlen($str_reduced) + strlen($append) ) > $max_length) { $str_reduced = preg_replace("/^\s?[^\s]+(\s.*)$/s", "\\1", $str_reduced); } $str_reduced = $append . $str_reduced; } else if ($position == self::$STR_REDUCE_RIGHT) { $str_reduced = preg_replace("/^(.{0," . $max_length . "}\s).*?$/s", "\\1", $str); while (( strlen($str_reduced) + strlen($append) ) > $max_length) { $str_reduced = preg_replace("/^(.*?\s)[^\s]+\s?$/s", "\\1", $str_reduced); } $str_reduced .= $append; } else if ($position == ( $this->STR_REDUCE_LEFT | self::$STR_REDUCE_RIGHT )) { $offset = ceil(( strlen($str) - $max_length ) / 2); $str_reduced = preg_replace("/^.{0," . $offset . "}|.{0," . $offset . "}$/s", "", $str); $str_reduced = preg_replace("/^[^\s]+|[^\s]+$/s", "", $str_reduced); while (( strlen($str_reduced) + ( 2 * strlen($append) ) ) > $max_length) { $str_reduced = preg_replace("/^(.*?\s)[^\s]+\s?$/s", "\\1", $str_reduced); if (( strlen($str_reduced) + ( 2 * strlen($append) ) ) > $max_length) { $str_reduced = preg_replace("/^\s?[^\s]+(\s.*)$/s", "\\1", $str_reduced); } } $str_reduced = $append . $str_reduced . $append; } else if ($position == $this->STR_REDUCE_CENTER) { $pattern = "/^(.{0," . floor($max_length / 2) . "}\s)|(\s.{0," . floor($max_length / 2) . "})$/s"; preg_match_all($pattern, $str, $matches); $begin_chunk = $matches[0][0]; $end_chunk = $matches[0][1]; while (( strlen($begin_chunk) + strlen($append) + strlen($end_chunk) ) > $max_length) { $end_chunk = preg_replace("/^\s?[^\s]+(\s.*)$/s", "\\1", $end_chunk); if (( strlen($begin_chunk) + strlen($append) + strlen($end_chunk) ) > $max_length) { $begin_chunk = preg_replace("/^(.*?\s)[^\s]+\s?$/s", "\\1", $begin_chunk); } } $str_reduced = $begin_chunk . $append . $end_chunk; } return htmlentities($str_reduced); } public static function FirstAndLastName($string) { $nome = explode(" ", $string); $first = $nome[0]; $last = end($nome); if (count($nome) == 1) { $result = $nome[0]; } else { $result = $first . ' ' . $last; } return $result; } public static function FormatToReal($n) { return number_format($n, 2, ',', '.'); } }